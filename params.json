{"name":"Frameworks","tagline":"","body":"DSL Framework for JFreeChart\r\n==============================\r\n\r\nIntroduction\r\n------------------------------\r\nThe present project try to make the Chart generation easy through a Fluent Api [^fluentApi]. The core of the Api is based on [JFreechart](http://www.jfree.org/ \"JFreechart Home\").\r\n\r\n@Chart Annotation\r\n------------------------------\r\nThe engine of the DSL for create Charts use the `@Chart` annotation for create the whole Chart. Basically, you have to decorate the class on your class with the Annotation and add properties that will map on graph properties.\r\n\r\nLet's to build a graph of \"amount vs age \" with the next information:\r\n\r\n| Player |  Mount |  Age | Date \r\n--------- | --------- | ----- | --------\r\nCristiano Ronaldo   | 1344.567   |  29   | 27/09/2014\r\nMessi   | 2344.567   |  27   | 27/09/2014\r\nBale   | 544.567   |  25   | 27/09/2014\r\n\r\nThe steps for create a graph are shown next:\r\n>  **Steps:**\r\n\r\n> 1. Create a JavaBean Class. and add an **`@Graph`** Annotation on top Of the class.\r\n> 2. Configure the The DSL for create the Graph\r\n\r\n###Create a JavaBean Class###\r\n\r\nThe Pojo created is shown next:\r\n\r\n```\r\n\r\n@Chart(chartType = ChartType.PIE_CHART, xProperty = \"edad\", yProperty = \"cantidad\")\r\npublic class Persona {\r\n\r\n\tprivate String persona;\r\n\t\r\n\tprivate double cantidad;\r\n\r\n\tprivate int edad;\r\n\r\n\tprivate Date fecha;\r\n\t\r\n   //Getters and Setters methods\r\n     .\r\n     .\r\n```\r\n###Configure the The DSL for create the Graph.###\r\n\r\nHere I show a snipped of code for create a graph Based on the DSL and `@Graph` annotation:\r\n\r\n```\r\nimport static com.danimaniarqsoft.report.poi.dsl.WorkbookBuilder.createWorkbook;\r\n    private List<Persona> personasDataset;\r\n     //Fill personasDataset from some datasource\r\n    JFreeChart chart = createChart().ofTypeXYPlotChart()\r\n\t    \t\t\t\t.withXAxisLabel(\"X-edad\").\r\n\t\t    \t\t\twithYAxisLabel(\"Y-cantidad\")\r\n\t\t\t    \t\t.withChartTitle(\"Reflection\")\r\n\t\t\t\t    \t.addDataSet(personasDataset, Persona.class).\r\n\t\t\t\t\t    createChart();\r\n\t\t\t\t\t\r\n    ChartUtilities.saveChartAsJPEG(new File(\"ReflectionChart.jpg\"),\r\n```\r\n\r\n### @Graph Annotation####\r\n\r\nThe `@Graph` annotation has a lot of properties for control the way how the DSL have to build the graph. The next table describe each property:\r\n\r\nAligments\r\n\r\nProperty    | Description   | Default\r\n----------- | ------------- | -------\r\n name       | The name of the column | nothing, it is mandatory\r\nchartType | This property is used for choose the kind of Graph we would like to build. The value is defined in the Enum `com.danimaniarqsoft.report.chart.dsl.ChartType` | nothing, it is mandatory\r\nxProperty | In this property we have to provide the correct name of the instance class that we want to use for print a point into the graph, This property represent the x coordinate of the point that will be printed in the graph  | nothing, it is mandatory\r\n[^fluentApi]:**Fluent Interface**, [Martin Fowler](http://martinfowler.com/bliki/FluentInterface.html) on December twenty of 2005 write about a certain style of interface which he decided to name **fluent interface**. We write DSL's based on the concept of **Fluent Interface**\r\n\r\n\r\n&copy; danimaniArqsoft","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}