package com.danimaniarqsoft.report.chart.charts;

import static com.danimaniarqsoft.report.chart.dsl.JfreeChartBuilder.createChart;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.xy.XYDataset;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.Test;

import com.danimaniarqsoft.report.chart.dataproviders.ChartDataProvider;
import com.danimaniarqsoft.report.chart.model.Persona;

/**
 * JfreeChartDslTest Class for Test the JfreeChartDsl.
 * 
 * @author Daniel Cortes Pichardo
 * 
 */
public class JfreeChartDslTest {
	private static final Logger LOG = LoggerFactory.getLogger(JfreeChartDslTest.class);

	private PieDataset pieDataset;
	private CategoryDataset barDataset;
	private XYDataset xyDataset;
	private List<Persona> personasDataset;

	/**
	 * Pie Chart Test
	 * 
	 * @throws IOException
	 */

	@Test(dataProvider = "crearDataSet", dataProviderClass = ChartDataProvider.class)
	public void pieChartTest(PieDataset pieDataset, CategoryDataset barDataset, XYDataset xyDataset,
			List<Persona> personasDataset) throws IOException {
		this.pieDataset = pieDataset;
		this.barDataset = barDataset;
		this.xyDataset = xyDataset;
		this.personasDataset = personasDataset;
		JFreeChart chart = createChart().ofTypePieChart().withXAxisLabel("X").withYAxisLabel("Y")
				.withChartTitle("01Pie Chart").addDataSet(pieDataset).createChart();
		ChartUtilities.saveChartAsJPEG(new File("PieChart.jpg"), chart, 500, 300);
	}

	/**
	 * Bar chart Test
	 * 
	 * @throws IOException
	 */
	@Test(enabled = false)
	public void barChartTest() throws IOException {
		JFreeChart chart = createChart().ofTypeBarChart().withXAxisLabel("X").withYAxisLabel("Y")
				.withChartTitle("02Bar chart").addDataSet(barDataset).createChart();
		ChartUtilities.saveChartAsJPEG(new File("BarChart.jpg"), chart, 500, 300);
	}

	/**
	 * Linear Chart Test
	 * 
	 * @throws IOException
	 */
	@Test(enabled = false)
	public void lineChartTest() throws IOException {
		try {
			JFreeChart chart = createChart().ofTypeLineChart().withXAxisLabel("X").withYAxisLabel("Y")
					.withChartTitle("03Line chart").addDataSet(barDataset).createChart();
			ChartUtilities.saveChartAsJPEG(new File("LineChart.jpg"), chart, 500, 300);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Line XY Test
	 * 
	 * @throws IOException
	 */
	@Test(enabled = false)
	public void lineXYTest() throws IOException {
		try {
			JFreeChart chart = createChart().ofTypeXYPlotChart().withXAxisLabel("X").withYAxisLabel("Y")
					.withChartTitle("04XY chart").addDataSet(xyDataset).createChart();
			ChartUtilities.saveChartAsJPEG(new File("XYChart.jpg"), chart, 5000, 300);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Chart generated by Reflection Test
	 * 
	 * @throws IOException
	 */
	@Test(enabled = false)
	public void reflectionTest() throws IOException {
		try {
			JFreeChart chart = createChart().ofTypeXYPlotChart().withXAxisLabel("X-edad").withYAxisLabel("Y-cantidad")
					.withChartTitle("Reflection").addDataSet(personasDataset, Persona.class).createChart();
			ChartUtilities.saveChartAsJPEG(new File("ReflectionChart.jpg"), chart, 500, 300);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static List<Persona> getPlayers() {
		List<Persona> personas = new ArrayList<Persona>();
		personas.add(new Persona("Messi", 26, 94.45, new Date()));
		personas.add(new Persona("Cristiano Ronaldo", 28, 4.75, new Date()));
		personas.add(new Persona("Bale", 24, 84.48, new Date()));
		personas.add(new Persona("Muller", 21, 45.47, new Date()));
		personas.add(new Persona("Benzema", 25, 62.565, new Date()));
		personas.add(new Persona("Ronaldhino", 34, 84.659, new Date()));
		return personas;
	}

	public static Map<String, Object> createHeaders() {
		Map<String, Object> header = new TreeMap<String, Object>();
		header.put("col01", BigDecimal.valueOf(genRandomDouble()));
		header.put("col02", BigDecimal.valueOf(genRandomDouble()));
		header.put("col03", BigDecimal.valueOf(genRandomDouble()));
		header.put("col04", BigDecimal.valueOf(genRandomDouble()));
		header.put("col05", BigDecimal.valueOf(genRandomDouble()));
		header.put("col06", BigDecimal.valueOf(genRandomDouble()));
		header.put("col07", BigDecimal.valueOf(genRandomDouble()));
		header.put("col08", BigDecimal.valueOf(genRandomDouble()));
		header.put("col09", BigDecimal.valueOf(genRandomDouble()));
		header.put("col10", BigDecimal.valueOf(genRandomDouble()));
		return header;
	}

	private static double genRandomDouble() {
		Random r = new Random();
		double rangeMin = 1;
		double rangeMax = 101;
		return rangeMin + (rangeMax - rangeMin) * r.nextDouble();
	}
}
